name: Production Deployment
######## IN CASE OF DEPLOYING ON SERVER ####################################
# You need to have Docker installed on your production server.
# Ensure the 'deployer' user exists and has sudo privileges without a password for the deploy script to work.
# You need to have a deploy.sh script on your server at /usr/local/bin/deploy.sh
# (`sudo visudo` and add: `deployer ALL=(ALL) NOPASSWD: /usr/local/bin/deploy.sh *`)
# The script should handle pulling the Docker image and restarting the service.
######### Note: You must set the following vars and secrets in your repository settings #########
# Vars:
#   PROD_DEPLOY: Set to 'true' to enable production deployment
#   PROD_DEPLOY_HOST: Your production server's IP or hostname
#   PROD_DEPLOY_SSH_PORT: SSH port for your production server
#   PROD_VITE_API_BASE_URL: Base URL for the production API
# Secrets:
#   PROD_DEPLOY_SSH_KEY: SSH private key for the deployer user on your production server
#   GHCR_PAT: Personal Access Token with read:packages scope for GitHub Container Registry

on:
  push:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - 'index.html'
      - 'nginx.conf'
      - 'package.json'
      - 'vite.config.*'
      - 'src/**'
      - '.github/workflows/docker-image.yml'
  
  # Build image automatically when a GitHub Release is published (ensures versioned tag published)
  release:
    types: [ published ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  REG_USERNAME: ${{ github.actor }}
  REG_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
  IMAGE_NAME: bugs-buzzy/bugsbuzzy-frontend
  PROD_ENV_FILE: |-
    APP_ENV=production
    VITE_API_BASE_URL=${{ vars.PROD_VITE_API_BASE_URL }}
    VITE_SENTRY_DSN=${{ vars.PROD_VITE_SENTRY_DSN }}
    VITE_ANALYTICS_KEY=${{ vars.PROD_VITE_ANALYTICS_KEY }}
    VITE_FEATURE_FLAGS_KEY=${{ vars.PROD_VITE_FEATURE_FLAGS_KEY }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate production env file
        run: |
          echo "${{ env.PROD_ENV_FILE }}" > .env.prod
          echo "Created .env.prod with production environment variables."
        shell: bash

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=prod-
            type=raw,value=latest
            type=raw,value=production

      - name: Build and push Production Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64 #,linux/arm64

      - name: Deploy Frontend to Production
        if: vars.PROD_DEPLOY == 'true'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ vars.PROD_DEPLOY_HOST }}
          username: deployer
          key: ${{ secrets.PROD_DEPLOY_SSH_KEY }}
          port: ${{ vars.PROD_DEPLOY_SSH_PORT }}
          script: |
            echo ${{ env.REG_USERNAME }}:${{ secrets.GHCR_PAT }} | sudo /usr/local/bin/deploy.sh frontend-production

      - name: Deploy notification
        run: |
          echo "ðŸš€ Production deployment completed!"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:production"
          echo "SHA: ${{ github.sha }}"
